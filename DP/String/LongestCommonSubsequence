class Solution {
    public int longestCommonSubsequence(String text1, String text2) {
        int[][] memo = new int[text1.length()][text2.length()];
        for (int i = 0; i < text1.length(); i++) Arrays.fill(memo[i], -1);
        return dfs(text1, text1.length() - 1, text2, text2.length() - 1, memo);
    }
    
    public int dfs(String s1, int i, String s2, int j, int[][] memo) {
        if (i < 0 || j < 0) {
            return 0;
        }
        if (memo[i][j] != -1) {
            return memo[i][j];
        }
        if (s1.charAt(i) == s2.charAt(j)) {
            return dfs(s1, i - 1, s2, j - 1, memo) + 1;
        }
        memo[i][j] = Math.max(dfs(s1, i - 1, s2, j, memo), dfs(s1, i, s2, j - 1, memo));
        return memo[i][j];
    }
}
